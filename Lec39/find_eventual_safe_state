import java.util.ArrayList;
import java.util.List;

public class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        int[] state = new int[n]; // 0: unvisited, 1: visiting, 2: safe
        List<Integer> safeNodes = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (dfs(graph, state, i)) {
                safeNodes.add(i);
            }
        }

        return safeNodes;
    }

    private boolean dfs(int[][] graph, int[] state, int node) {
        if (state[node] == 1) {
            return false; // found a cycle
        }
        if (state[node] == 2) {
            return true; // already determined to be safe
        }

        state[node] = 1; // mark as visiting

        for (int neighbor : graph[node]) {
            if (!dfs(graph, state, neighbor)) {
                return false; // if any neighbor is not safe, this node is not safe
            }
        }

        state[node] = 2; // mark as safe
        return true;
    }
}
