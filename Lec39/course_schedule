package Lec39;
import java.util.ArrayList;
import java.util.List;

public class course_schedule {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // Create an adjacency list to represent the graph
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < numCourses; i++) {
            graph.add(new ArrayList<>());
        }
        
        // Fill the adjacency list with the edges (prerequisites)
        for (int[] pair : prerequisites) {
            graph.get(pair[1]).add(pair[0]);
        }
        
        // Array to keep track of visit status of each node (course)
        // 0 = unvisited, 1 = visiting, 2 = visited
        int[] visited = new int[numCourses];
        
        // Perform DFS for each course
        for (int i = 0; i < numCourses; i++) {
            if (!dfs(graph, visited, i)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean dfs(List<List<Integer>> graph, int[] visited, int course) {
        // If the node is currently being visited, we have found a cycle
        if (visited[course] == 1) {
            return false;
        }
        // If the node has already been visited, no need to do anything
        if (visited[course] == 2) {
            return true;
        }
        
        // Mark the node as visiting
        visited[course] = 1;
        
        // Visit all the neighbors
        for (int neighbor : graph.get(course)) {
            if (!dfs(graph, visited, neighbor)) {
                return false;
            }
        }
        
        // Mark the node as visited
        visited[course] = 2;
        
        return true;
    }
}
